{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tinkoff Invest","text":"<p>\u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python.</p> <ul> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e Invest API</li> </ul>"},{"location":"#_1","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b","text":"pip install tinkoff-investments"},{"location":"#_2","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442</li> <li>\u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438</li> <li>\u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\"</li> <li>\u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f</li> </ul>"},{"location":"#_3","title":"\u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f","text":""},{"location":"#_4","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432","text":"<pre><code>from tinkoff.invest import Client\n\nTOKEN = 'token'\n\nwith Client(TOKEN) as client:\n    print(client.users.get_accounts())\n</code></pre>"},{"location":"#target","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target","text":"<p>\u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435.</p> <p>\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\"</p> <pre><code>from tinkoff.invest import Client\nfrom tinkoff.invest.constants import INVEST_GRPC_API\n\nTOKEN = 'token'\n\nwith Client(TOKEN, target=INVEST_GRPC_API) as client:\n    print(client.users.get_accounts())\n</code></pre> <p>:warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 </p> <p>\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>\u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442.</p> <ul> <li>CONTRIBUTING</li> </ul>"},{"location":"#license","title":"License","text":"<p>\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>You can see the commits</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest!</p>"},{"location":"CONTRIBUTING/#_1","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<ol> <li>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li>\u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440     <pre><code>git clone https://github.com/username/invest-python.git\n</code></pre>     &gt; \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 username \u0432\u043c\u0435\u0441\u0442\u043e <code>username</code></li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439     <pre><code>git checkout -b branch_name\n</code></pre></li> <li>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435)</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435     <pre><code>git add .\ngit commit -m \"feat: add new feature\"\n</code></pre></li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github     <pre><code>git push\n</code></pre></li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439</li> </ol>"},{"location":"CONTRIBUTING/#commit-message-format","title":"Commit Message Format","text":"<p>\u041c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439 Conventional Commits \u0434\u043b\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432.</p> <p>A specification for adding human and machine readable meaning to commit messages.</p> <p>Body \u0438 Footer \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e.</p>"},{"location":"CONTRIBUTING/#commit-message-header","title":"Commit Message Header","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;\n  \u2502       \u2502             \u2502\n  \u2502       \u2502             \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end.\n  \u2502       \u2502\n  \u2502       \u2514\u2500\u2af8 Commit Scope: grpc, async, mypy, schemas, sandbox\n  \u2502\n  \u2514\u2500\u2af8 Commit Type: feat|fix|build|ci|docs|perf|refactor|test|chore\n</code></pre>"},{"location":"CONTRIBUTING/#type","title":"Type","text":"feat Features A new feature fix Bug Fixes A bug fix docs Documentation Documentation only changes style Styles Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor Code Refactoring A code change that neither fixes a bug nor adds a feature perf Performance Improvements A code change that improves performance test Tests Adding missing tests or correcting existing tests build Builds Changes that affect the build system or external dependencies (example scopes: mypy, pip, pytest) ci Continuous Integrations Changes to our CI configuration files and scripts (example scopes: Github Actions) chore Chores Other changes that don't modify src or test files revert Reverts Reverts a previous commit"},{"location":"CONTRIBUTING/#_2","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435","text":"<p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make. \u0412\u0441\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 Makefile. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0445 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.</p>"},{"location":"CONTRIBUTING/#_3","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<pre><code>make install-poetry\nmake install\n</code></pre>"},{"location":"CONTRIBUTING/#_4","title":"\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, poetry \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 <code>~/.cache/pypoetry/virtualenvs/</code>. \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <pre><code>poetry config virtualenvs.in-project true\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0430\u043c\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:</p> <pre><code>python -m venv .venv\n</code></pre> <p>poetry \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e.</p>"},{"location":"CONTRIBUTING/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432","text":"<pre><code>make test\n</code></pre>"},{"location":"CONTRIBUTING/#_6","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432","text":"<pre><code>make lint\n</code></pre>"},{"location":"CONTRIBUTING/#_7","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>make format\n</code></pre>"},{"location":"CONTRIBUTING/#proto","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432","text":"<pre><code>make download-protos\n</code></pre> <p>\u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 <code>main</code>.</p>"},{"location":"CONTRIBUTING/#_8","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>make gen-grpc\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py</p>"},{"location":"CONTRIBUTING/#proto_1","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<p>\u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.</p> <pre><code>make gen-client\n</code></pre>"},{"location":"CONTRIBUTING/#release","title":"Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438","text":"<p>\u0420\u0435\u043b\u0438\u0437 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 main \u0432\u0435\u0442\u043a\u0443.</p>"},{"location":"examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0437\u0434\u0435\u0441\u044c.</p>"},{"location":"examples/#_1","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434","text":"<p>examples/all_candles.py <pre><code>import os\nfrom datetime import timedelta\n\nfrom tinkoff.invest import CandleInterval, Client\nfrom tinkoff.invest.schemas import CandleSource\nfrom tinkoff.invest.utils import now\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with Client(TOKEN) as client:\n        for candle in client.get_all_candles(\n            instrument_id=\"BBG004730N88\",\n            from_=now() - timedelta(days=365),\n            interval=CandleInterval.CANDLE_INTERVAL_HOUR,\n            candle_source_type=CandleSource.CANDLE_SOURCE_UNSPECIFIED,\n        ):\n            print(candle)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_2","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434","text":"<p>examples/async_all_candles.py <pre><code>import asyncio\nimport os\nfrom datetime import timedelta\n\nfrom tinkoff.invest import AsyncClient, CandleInterval\nfrom tinkoff.invest.schemas import CandleSource\nfrom tinkoff.invest.utils import now\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\nasync def main():\n    async with AsyncClient(TOKEN) as client:\n        async for candle in client.get_all_candles(\n            instrument_id=\"BBG004730N88\",\n            from_=now() - timedelta(days=365),\n            interval=CandleInterval.CANDLE_INTERVAL_HOUR,\n            candle_source_type=CandleSource.CANDLE_SOURCE_EXCHANGE,\n        ):\n            print(candle)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"examples/#_3","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<p>examples/async_client.py <pre><code>import asyncio\nimport os\n\nfrom tinkoff.invest import AsyncClient\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\nasync def main():\n    async with AsyncClient(TOKEN) as client:\n        print(await client.users.get_accounts())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"examples/#_4","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439","text":"<p>examples/async_retrying_client.py <pre><code>import asyncio\nimport logging\nimport os\nfrom datetime import timedelta\n\nfrom tinkoff.invest import CandleInterval\nfrom tinkoff.invest.retrying.aio.client import AsyncRetryingClient\nfrom tinkoff.invest.retrying.settings import RetryClientSettings\nfrom tinkoff.invest.utils import now\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nretry_settings = RetryClientSettings(use_retry=True, max_retry_attempt=2)\n\n\nasync def main():\n    async with AsyncRetryingClient(TOKEN, settings=retry_settings) as client:\n        async for candle in client.get_all_candles(\n            figi=\"BBG000B9XRY4\",\n            from_=now() - timedelta(days=301),\n            interval=CandleInterval.CANDLE_INTERVAL_1_MIN,\n        ):\n            print(candle)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"examples/#_5","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c","text":"<p>examples/async_stream_client.py <pre><code>import asyncio\nimport os\n\nfrom tinkoff.invest import (\n    AsyncClient,\n    CandleInstrument,\n    MarketDataRequest,\n    SubscribeCandlesRequest,\n    SubscriptionAction,\n    SubscriptionInterval,\n)\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\nasync def main():\n    async def request_iterator():\n        yield MarketDataRequest(\n            subscribe_candles_request=SubscribeCandlesRequest(\n                subscription_action=SubscriptionAction.SUBSCRIPTION_ACTION_SUBSCRIBE,\n                instruments=[\n                    CandleInstrument(\n                        figi=\"BBG004730N88\",\n                        interval=SubscriptionInterval.SUBSCRIPTION_INTERVAL_ONE_MINUTE,\n                    )\n                ],\n            )\n        )\n        while True:\n            await asyncio.sleep(1)\n\n    async with AsyncClient(TOKEN) as client:\n        async for marketdata in client.market_data_stream.market_data_stream(\n            request_iterator()\n        ):\n            print(marketdata)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"examples/#_6","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439","text":"<p>examples/cancel_orders.py <pre><code>import logging\nimport os\n\nfrom tinkoff.invest import Client\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n\ndef main():\n    with Client(TOKEN) as client:\n        response = client.users.get_accounts()\n        account, *_ = response.accounts\n        account_id = account.id\n        logger.info(\"Orders: %s\", client.orders.get_orders(account_id=account_id))\n        client.cancel_all_orders(account_id=account.id)\n        logger.info(\"Orders: %s\", client.orders.get_orders(account_id=account_id))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_7","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<p>examples/client.py <pre><code>import os\n\nfrom tinkoff.invest import Client\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with Client(TOKEN) as client:\n        print(client.users.get_accounts())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_8","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443","text":"<p>examples/download_all_candles.py <pre><code>import logging\nimport os\nfrom datetime import timedelta\nfrom pathlib import Path\n\nfrom tinkoff.invest import CandleInterval, Client\nfrom tinkoff.invest.caching.market_data_cache.cache import MarketDataCache\nfrom tinkoff.invest.caching.market_data_cache.cache_settings import (\n    MarketDataCacheSettings,\n)\nfrom tinkoff.invest.utils import now\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\nlogging.basicConfig(format=\"%(levelname)s: %(message)s\", level=logging.DEBUG)\n\n\ndef main():\n    with Client(TOKEN) as client:\n        settings = MarketDataCacheSettings(base_cache_dir=Path(\"market_data_cache\"))\n        market_data_cache = MarketDataCache(settings=settings, services=client)\n        for candle in market_data_cache.get_all_candles(\n            figi=\"BBG004730N88\",\n            from_=now() - timedelta(days=1),\n            interval=CandleInterval.CANDLE_INTERVAL_HOUR,\n        ):\n            print(candle.time, candle.is_complete)\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_9","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439","text":"<p>examples/easy_async_stream_client.py <pre><code>import asyncio\nimport os\n\nfrom tinkoff.invest import (\n    AsyncClient,\n    CandleInstrument,\n    InfoInstrument,\n    MarketDataResponse,\n    SubscriptionInterval,\n    TradeInstrument,\n)\nfrom tinkoff.invest.async_services import AsyncMarketDataStreamManager\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\nasync def main():\n    async with AsyncClient(TOKEN) as client:\n        market_data_stream: AsyncMarketDataStreamManager = (\n            client.create_market_data_stream()\n        )\n        market_data_stream.candles.waiting_close().subscribe(\n            [\n                CandleInstrument(\n                    figi=\"BBG004730N88\",\n                    interval=SubscriptionInterval.SUBSCRIPTION_INTERVAL_ONE_MINUTE,\n                )\n            ]\n        )\n        market_data_stream.trades.subscribe(\n            [\n                TradeInstrument(\n                    figi=\"BBG004730N88\",\n                )\n            ]\n        )\n        async for marketdata in market_data_stream:\n            marketdata: MarketDataResponse = marketdata\n            print(marketdata)\n            market_data_stream.info.subscribe([InfoInstrument(figi=\"BBG004730N88\")])\n            if marketdata.subscribe_info_response:\n                market_data_stream.stop()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p>"},{"location":"examples/#_10","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439","text":"<p>examples/easy_stream_client.py <pre><code>import os\n\nfrom tinkoff.invest import (\n    CandleInstrument,\n    Client,\n    InfoInstrument,\n    SubscriptionInterval,\n)\nfrom tinkoff.invest.services import MarketDataStreamManager\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with Client(TOKEN) as client:\n        market_data_stream: MarketDataStreamManager = client.create_market_data_stream()\n        market_data_stream.candles.waiting_close().subscribe(\n            [\n                CandleInstrument(\n                    figi=\"BBG004730N88\",\n                    interval=SubscriptionInterval.SUBSCRIPTION_INTERVAL_ONE_MINUTE,\n                )\n            ]\n        )\n        for marketdata in market_data_stream:\n            print(marketdata)\n            market_data_stream.info.subscribe([InfoInstrument(figi=\"BBG004730N88\")])\n            if marketdata.subscribe_info_response:\n                market_data_stream.stop()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_11","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434","text":"<p>examples/get_operations_by_cursor.py <pre><code>import os\nfrom pprint import pprint\n\nfrom tinkoff.invest import Client, GetOperationsByCursorRequest\n\ntoken = os.environ[\"INVEST_TOKEN\"]\n\n\nwith Client(token) as client:\n    accounts = client.users.get_accounts()\n    account_id = accounts.accounts[0].id\n\n    def get_request(cursor=\"\"):\n        return GetOperationsByCursorRequest(\n            account_id=account_id,\n            instrument_id=\"BBG004730N88\",\n            cursor=cursor,\n            limit=1,\n        )\n\n    operations = client.operations.get_operations_by_cursor(get_request())\n    print(operations)\n    depth = 10\n    while operations.has_next and depth &gt; 0:\n        request = get_request(cursor=operations.next_cursor)\n        operations = client.operations.get_operations_by_cursor(request)\n        pprint(operations)\n        depth -= 1\n</code></pre></p>"},{"location":"examples/#_12","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432","text":"<p>examples/instrument_cache.py <pre><code>import logging\nimport os\nfrom pprint import pprint\n\nfrom tinkoff.invest import Client, InstrumentIdType\nfrom tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache\nfrom tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\nlogging.basicConfig(level=logging.INFO)\n\n\ndef main():\n    with Client(TOKEN) as client:\n        inst = client.instruments.etfs().instruments[-1]\n        pprint(inst)\n\n        from_server = client.instruments.etf_by(\n            id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_UID,\n            class_code=inst.class_code,\n            id=inst.uid,\n        )\n        pprint(from_server)\n\n        settings = InstrumentsCacheSettings()\n        instruments_cache = InstrumentsCache(\n            settings=settings, instruments_service=client.instruments\n        )\n\n        from_cache = instruments_cache.etf_by(\n            id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_UID,\n            class_code=inst.class_code,\n            id=inst.uid,\n        )\n        pprint(from_cache)\n\n        if str(from_server) != str(from_cache):\n            raise Exception(\"cache miss\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#query","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query","text":"<p>examples/instruments.py <pre><code>import os\n\nfrom tinkoff.invest import Client\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with Client(TOKEN) as client:\n        r = client.instruments.find_instrument(query=\"BBG001M2SC01\")\n        for i in r.instruments:\n            print(i)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_13","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a","text":"<p>examples/logger.py <pre><code>import logging\nimport os\n\nfrom tinkoff.invest import Client, RequestError\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef main():\n    with Client(TOKEN) as client:\n        _ = client.users.get_accounts().accounts\n        try:\n            client.users.get_margin_attributes(account_id=\"123\")\n        except RequestError as err:\n            tracking_id = err.metadata.tracking_id if err.metadata else \"\"\n            logger.error(\"Error tracking_id=%s code=%s\", tracking_id, str(err.code))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_14","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438","text":"<p>examples/porfolio_stream_client.py <pre><code>import os\n\nfrom tinkoff.invest import Client\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with Client(TOKEN) as client:\n        accounts = client.users.get_accounts()\n        for portfolio in client.operations_stream.portfolio_stream(\n            accounts=[acc.id for acc in accounts.accounts]\n        ):\n            print(portfolio)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_15","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438","text":"<p>examples/positions_stream.py <pre><code>import os\n\nfrom tinkoff.invest import Client\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with Client(TOKEN) as client:\n        response = client.users.get_accounts()\n        accounts = [account.id for account in response.accounts]\n        for response in client.operations_stream.positions_stream(accounts=accounts):\n            print(response)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_16","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439","text":"<p>examples/retrying_client.py <pre><code>import logging\nimport os\nfrom datetime import timedelta\n\nfrom tinkoff.invest import CandleInterval\nfrom tinkoff.invest.retrying.settings import RetryClientSettings\nfrom tinkoff.invest.retrying.sync.client import RetryingClient\nfrom tinkoff.invest.utils import now\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nretry_settings = RetryClientSettings(use_retry=True, max_retry_attempt=2)\n\nwith RetryingClient(TOKEN, settings=retry_settings) as client:\n    for candle in client.get_all_candles(\n        figi=\"BBG000B9XRY4\",\n        from_=now() - timedelta(days=301),\n        interval=CandleInterval.CANDLE_INTERVAL_1_MIN,\n    ):\n        print(candle)\n</code></pre></p>"},{"location":"examples/#_17","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435","text":"<p>examples/sandbox_client.py <pre><code>import os\n\nfrom tinkoff.invest.sandbox.client import SandboxClient\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    with SandboxClient(TOKEN) as client:\n        print(client.users.get_info())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_18","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434","text":"<p>examples/stream_client.py <pre><code>import os\nimport time\n\nfrom tinkoff.invest import (\n    CandleInstrument,\n    Client,\n    MarketDataRequest,\n    SubscribeCandlesRequest,\n    SubscriptionAction,\n    SubscriptionInterval,\n)\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\ndef main():\n    def request_iterator():\n        yield MarketDataRequest(\n            subscribe_candles_request=SubscribeCandlesRequest(\n                waiting_close=True,\n                subscription_action=SubscriptionAction.SUBSCRIPTION_ACTION_SUBSCRIBE,\n                instruments=[\n                    CandleInstrument(\n                        figi=\"BBG004730N88\",\n                        interval=SubscriptionInterval.SUBSCRIPTION_INTERVAL_ONE_MINUTE,\n                    )\n                ],\n            )\n        )\n        while True:\n            time.sleep(1)\n\n    with Client(TOKEN) as client:\n        for marketdata in client.market_data_stream.market_data_stream(\n            request_iterator()\n        ):\n            print(marketdata)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#-","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u044d\u0439\u043a-\u043f\u0440\u043e\u0444\u0438\u0442 \u0441\u0442\u043e\u043f \u043e\u0440\u0434\u0435\u0440\u0430","text":"<p>examples/wiseplat_create_take_profit_stop_order.py <pre><code>\"\"\"Example - How to create takeprofit buy order.\"\"\"\nimport logging\nimport os\nfrom decimal import Decimal\n\nfrom tinkoff.invest import (\n    Client,\n    InstrumentIdType,\n    StopOrderDirection,\n    StopOrderExpirationType,\n    StopOrderType,\n)\nfrom tinkoff.invest.exceptions import InvestError\nfrom tinkoff.invest.utils import decimal_to_quotation, quotation_to_decimal\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n\ndef main():\n    \"\"\"Example - How to create takeprofit buy order.\"\"\"\n    with Client(TOKEN) as client:\n        response = client.users.get_accounts()\n        account, *_ = response.accounts\n        account_id = account.id\n        logger.info(\"Orders: %s\", client.orders.get_orders(account_id=account_id))\n\n        figi = \"BBG004730ZJ9\"  # BBG004730ZJ9 - VTBR / BBG004730N88 - SBER\n\n        # getting the last price for instrument\n        last_price = (\n            client.market_data.get_last_prices(figi=[figi]).last_prices[0].price\n        )\n        last_price = quotation_to_decimal(last_price)\n        print(f\"figi, last price = {last_price}\")\n\n        # setting the percentage by which the takeprofit stop order\n        # should be set below the last price\n        percent_down = 5\n\n        # calculation of the price for takeprofit stop order\n        calculated_price = last_price - last_price * Decimal(percent_down / 100)\n        print(f\"calculated_price = {calculated_price}\")\n\n        # getting the min price increment and the number of digits after point\n        min_price_increment = client.instruments.get_instrument_by(\n            id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_FIGI, id=figi\n        ).instrument.min_price_increment\n        number_digits_after_point = 9 - len(str(min_price_increment.nano)) + 1\n        min_price_increment = quotation_to_decimal(min_price_increment)\n        print(\n            f\"min_price_increment = {min_price_increment}, \"\n            f\"number_digits_after_point={number_digits_after_point}\"\n        )\n\n        # calculation of the price for instrument which is\n        # divisible to min price increment\n        calculated_price = (\n            round(calculated_price / min_price_increment) * min_price_increment\n        )\n        print(\n            f\"let's send stop order at price = \"\n            f\"{calculated_price:.{number_digits_after_point}f} divisible to \"\n            f\"min price increment {min_price_increment}\"\n        )\n\n        # creating takeprofit buy order\n        stop_order_type = StopOrderType.STOP_ORDER_TYPE_TAKE_PROFIT\n        direction = StopOrderDirection.STOP_ORDER_DIRECTION_BUY\n        exp_type = StopOrderExpirationType.STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL\n        try:\n            response = client.stop_orders.post_stop_order(\n                figi=figi,\n                quantity=1,\n                price=decimal_to_quotation(Decimal(calculated_price)),\n                stop_price=decimal_to_quotation(Decimal(calculated_price)),\n                direction=direction,\n                account_id=account_id,\n                expiration_type=exp_type,\n                stop_order_type=stop_order_type,\n                expire_date=None,\n            )\n            print(response)\n            print(\"stop_order_id=\", response.stop_order_id)\n        except InvestError as error:\n            logger.error(\"Posting trade takeprofit order failed. Exception: %s\", error)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_19","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043f \u043e\u0440\u0434\u0435\u0440\u043e\u0432","text":"<p>examples/wiseplat_cancel_all_stop_orders.py <pre><code>\"\"\"Example - How to cancel all stop orders.\"\"\"\nimport logging\nimport os\n\nfrom tinkoff.invest import Client\nfrom tinkoff.invest.exceptions import InvestError\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n\ndef main():\n    \"\"\"Example - How to cancel all stop orders.\"\"\"\n    with Client(TOKEN) as client:\n        response = client.users.get_accounts()\n        account, *_ = response.accounts\n        account_id = account.id\n\n        try:\n            stop_orders_response = client.stop_orders.get_stop_orders(\n                account_id=account_id\n            )\n            logger.info(\"Stop Orders: %s\", stop_orders_response)\n            for stop_order in stop_orders_response.stop_orders:\n                client.stop_orders.cancel_stop_order(\n                    account_id=account_id, stop_order_id=stop_order.stop_order_id\n                )\n                logger.info(\"Stop Order: %s was canceled.\", stop_order.stop_order_id)\n            logger.info(\n                \"Orders: %s\", client.stop_orders.get_stop_orders(account_id=account_id)\n            )\n        except InvestError as error:\n            logger.error(\"Failed to cancel all orders. Error: %s\", error)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#figi","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 figi \u0434\u043b\u044f \u0442\u0438\u043a\u0435\u0440\u0430","text":"<p>examples/wiseplat_get_figi_for_ticker.py <pre><code>\"\"\"Example - How to get figi by name of ticker.\"\"\"\nimport logging\nimport os\n\nfrom pandas import DataFrame\n\nfrom tinkoff.invest import Client, SecurityTradingStatus\nfrom tinkoff.invest.services import InstrumentsService\nfrom tinkoff.invest.utils import quotation_to_decimal\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n\ndef main():\n    \"\"\"Example - How to get figi by name of ticker.\"\"\"\n\n    ticker = \"VTBR\"  # \"BRH3\" \"SBER\" \"VTBR\"\n\n    with Client(TOKEN) as client:\n        instruments: InstrumentsService = client.instruments\n        tickers = []\n        for method in [\"shares\", \"bonds\", \"etfs\", \"currencies\", \"futures\"]:\n            for item in getattr(instruments, method)().instruments:\n                tickers.append(\n                    {\n                        \"name\": item.name,\n                        \"ticker\": item.ticker,\n                        \"class_code\": item.class_code,\n                        \"figi\": item.figi,\n                        \"uid\": item.uid,\n                        \"type\": method,\n                        \"min_price_increment\": quotation_to_decimal(\n                            item.min_price_increment\n                        ),\n                        \"scale\": 9 - len(str(item.min_price_increment.nano)) + 1,\n                        \"lot\": item.lot,\n                        \"trading_status\": str(\n                            SecurityTradingStatus(item.trading_status).name\n                        ),\n                        \"api_trade_available_flag\": item.api_trade_available_flag,\n                        \"currency\": item.currency,\n                        \"exchange\": item.exchange,\n                        \"buy_available_flag\": item.buy_available_flag,\n                        \"sell_available_flag\": item.sell_available_flag,\n                        \"short_enabled_flag\": item.short_enabled_flag,\n                        \"klong\": quotation_to_decimal(item.klong),\n                        \"kshort\": quotation_to_decimal(item.kshort),\n                    }\n                )\n\n        tickers_df = DataFrame(tickers)\n\n        ticker_df = tickers_df[tickers_df[\"ticker\"] == ticker]\n        if ticker_df.empty:\n            logger.error(\"There is no such ticker: %s\", ticker)\n            return\n\n        figi = ticker_df[\"figi\"].iloc[0]\n        print(f\"\\nTicker {ticker} have figi={figi}\\n\")\n        print(f\"Additional info for this {ticker} ticker:\")\n        print(ticker_df.iloc[0])\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#_20","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 / \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0434\u043b\u044f \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 / \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u044b.","text":"<p>examples/wiseplat_set_get_sandbox_balance.py <pre><code>\"\"\" Example - How to set/get balance for sandbox account.\n    How to get/close all sandbox accounts.\n    How to open new sandbox account. \"\"\"\n\nimport logging\nimport os\nfrom datetime import datetime\nfrom decimal import Decimal\n\nfrom tinkoff.invest import MoneyValue\nfrom tinkoff.invest.sandbox.client import SandboxClient\nfrom tinkoff.invest.utils import decimal_to_quotation, quotation_to_decimal\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n\ndef add_money_sandbox(client, account_id, money, currency=\"rub\"):\n    \"\"\"Function to add money to sandbox account.\"\"\"\n    money = decimal_to_quotation(Decimal(money))\n    return client.sandbox.sandbox_pay_in(\n        account_id=account_id,\n        amount=MoneyValue(units=money.units, nano=money.nano, currency=currency),\n    )\n\n\ndef main():\n    \"\"\"Example - How to set/get balance for sandbox account.\n    How to get/close all sandbox accounts.\n    How to open new sandbox account.\"\"\"\n    with SandboxClient(TOKEN) as client:\n        # get all sandbox accounts\n        sandbox_accounts = client.users.get_accounts()\n        print(sandbox_accounts)\n\n        # close all sandbox accounts\n        for sandbox_account in sandbox_accounts.accounts:\n            client.sandbox.close_sandbox_account(account_id=sandbox_account.id)\n\n        # open new sandbox account\n        sandbox_account = client.sandbox.open_sandbox_account()\n        print(sandbox_account.account_id)\n\n        account_id = sandbox_account.account_id\n\n        # add initial 2 000 000 to sandbox account\n        print(add_money_sandbox(client=client, account_id=account_id, money=2000000))\n        logger.info(\n            \"positions: %s\", client.operations.get_positions(account_id=account_id)\n        )\n        print(\n            \"money: \",\n            float(\n                quotation_to_decimal(\n                    client.operations.get_positions(account_id=account_id).money[0]\n                )\n            ),\n        )\n\n        logger.info(\"orders: %s\", client.orders.get_orders(account_id=account_id))\n        logger.info(\n            \"positions: %s\", client.operations.get_positions(account_id=account_id)\n        )\n        logger.info(\n            \"portfolio: %s\", client.operations.get_portfolio(account_id=account_id)\n        )\n        logger.info(\n            \"operations: %s\",\n            client.operations.get_operations(\n                account_id=account_id,\n                from_=datetime(2023, 1, 1),\n                to=datetime(2023, 2, 5),\n            ),\n        )\n        logger.info(\n            \"withdraw_limits: %s\",\n            client.operations.get_withdraw_limits(account_id=account_id),\n        )\n\n        # add + 2 000 000 to sandbox account, total is 4 000 000\n        print(add_money_sandbox(client=client, account_id=account_id, money=2000000))\n        logger.info(\n            \"positions: %s\", client.operations.get_positions(account_id=account_id)\n        )\n\n        # close new sandbox account\n        sandbox_account = client.sandbox.close_sandbox_account(\n            account_id=sandbox_account.account_id\n        )\n        print(sandbox_account)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"examples/#live-ohlcv","title":"\u041f\u0440\u0438\u043c\u0435\u0440 live \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u0438\u043a\u0435\u0440\u043e\u0432. \u0412\u044b\u0432\u043e\u0434 OHLCV \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u0441\u0432\u0435\u0447\u0438.","text":"<p>examples/wiseplat_live_strategy_print_ohlcv.py <pre><code>\"\"\"\n    This code is an example of applying Trading Strategy for several Tickers.\n    The strategy in this code is for demonstration only purposes\n    - it outputs OHLCV values.\n    Author: Oleg Shpagin, my github: https://github.com/WISEPLAT\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nfrom datetime import timedelta\nfrom typing import List, Optional\n\nfrom tinkoff.invest import AioRequestError, AsyncClient, CandleInterval, HistoricCandle\nfrom tinkoff.invest.async_services import AsyncServices\nfrom tinkoff.invest.utils import now\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n\nclass LogOnlyCandlesStrategy:\n    \"\"\"This class is responsible for a strategy. You can put here\n    your methods for your strategy.\"\"\"\n\n    def __init__(\n        self,\n        figi: str,\n        timeframe: CandleInterval,\n        days_back: int,\n        check_interval: int,\n        client: Optional[AsyncServices],\n    ):\n        self.account_id = None\n        self.figi = figi\n        self.timeframe = timeframe\n        self.days_back = days_back\n        self.check_interval = check_interval\n        self.client = client\n        self.candles: List[HistoricCandle] = []\n\n    async def get_historical_data(self):\n        \"\"\"\n        Gets historical data for the instrument. Returns list of candles.\n        Requests all the candles of timeframe from days_back to now.\n\n        :return: list of HistoricCandle\n        \"\"\"\n        logger.debug(\n            \"Start getting historical data for %s days back from now. figi=%s\",\n            self.days_back,\n            self.figi,\n        )\n        async for candle in self.client.get_all_candles(\n            figi=self.figi,\n            from_=now() - timedelta(days=self.days_back),\n            to=now(),\n            interval=self.timeframe,\n        ):\n            if candle not in self.candles:\n                if candle.is_complete:\n                    self.candles.append(candle)\n                    logger.debug(\"Found %s - figi=%s\", candle, self.figi)\n\n    async def ensure_market_open(self):\n        \"\"\"\n        Ensure that the market is open. Loop until the instrument is available.\n        :return: when instrument is available for trading\n        \"\"\"\n        trading_status = await self.client.market_data.get_trading_status(\n            figi=self.figi\n        )\n        while not (\n            trading_status.market_order_available_flag\n            and trading_status.api_trade_available_flag\n        ):\n            logger.debug(\"Waiting for the market to open. figi=%s\", self.figi)\n            await asyncio.sleep(60)\n            trading_status = await self.client.market_data.get_trading_status(\n                figi=self.figi\n            )\n\n    async def main_cycle(self):\n        \"\"\"Main cycle for live strategy.\"\"\"\n        while True:\n            try:\n                await self.ensure_market_open()\n                await self.get_historical_data()\n\n                # put your strategy code here for live\n                # to generate signals for buying or selling tickers\n                logger.debug(\n                    \"- live mode: run some strategy code to buy or sell - figi=%s\",\n                    self.figi,\n                )\n\n            except AioRequestError as are:\n                logger.error(\"Client error %s\", are)\n\n            await asyncio.sleep(self.check_interval)\n\n    async def start(self):\n        \"\"\"Strategy starts from this function.\"\"\"\n        if self.account_id is None:\n            try:\n                self.account_id = (\n                    (await self.client.users.get_accounts()).accounts.pop().id\n                )\n            except AioRequestError as are:\n                logger.error(\"Error taking account id. Stopping strategy. %s\", are)\n                return\n        await self.main_cycle()\n\n\nasync def run_strategy(portfolio, timeframe, days_back, check_interval):\n    \"\"\"From this function we are starting\n    strategy for every ticker from portfolio.\n    \"\"\"\n    async with AsyncClient(token=TOKEN, app_name=\"TinkoffApp\") as client:\n        strategy_tasks = []\n        for instrument in portfolio:\n            strategy = LogOnlyCandlesStrategy(\n                figi=instrument,\n                timeframe=timeframe,\n                days_back=days_back,\n                check_interval=check_interval,\n                client=client,\n            )\n            strategy_tasks.append(asyncio.create_task(strategy.start()))\n        await asyncio.gather(*strategy_tasks)\n\n\nif __name__ == \"__main__\":\n    sber_figi = \"BBG004730N88\"\n    vtbr_figi = \"BBG004730ZJ9\"\n    portfolio = {sber_figi, vtbr_figi}\n    timeframe = CandleInterval.CANDLE_INTERVAL_1_MIN\n    days_back = 1\n    check_interval = 10  # seconds to check interval for new completed candle\n\n    loop = asyncio.get_event_loop()\n    task = loop.create_task(\n        run_strategy(\n            portfolio=portfolio,\n            timeframe=timeframe,\n            days_back=days_back,\n            check_interval=check_interval,\n        )\n    )\n    loop.run_until_complete(task)\n</code></pre></p>"},{"location":"robots/","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"robots/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b."},{"location":"robots/#_2","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. <pre><code>import logging\nimport os\nfrom datetime import timedelta\nfrom decimal import Decimal\n\nfrom matplotlib import pyplot as plt\n\nfrom tinkoff.invest import CandleInterval, Client\nfrom tinkoff.invest.strategies.base.account_manager import AccountManager\nfrom tinkoff.invest.strategies.moving_average.plotter import (\n    MovingAverageStrategyPlotter,\n)\nfrom tinkoff.invest.strategies.moving_average.signal_executor import (\n    MovingAverageSignalExecutor,\n)\nfrom tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy\nfrom tinkoff.invest.strategies.moving_average.strategy_settings import (\n    MovingAverageStrategySettings,\n)\nfrom tinkoff.invest.strategies.moving_average.strategy_state import (\n    MovingAverageStrategyState,\n)\nfrom tinkoff.invest.strategies.moving_average.supervisor import (\n    MovingAverageStrategySupervisor,\n)\nfrom tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader\n\nlogging.basicConfig(format=\"%(asctime)s %(levelname)s:%(message)s\", level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\nFIGI = os.environ[\"INVEST_FIGI\"]\nACCOUNT_ID = os.environ[\"INVEST_ACCOUNT_ID\"]\n\n\ndef main():\n    with Client(TOKEN) as services:\n        settings = MovingAverageStrategySettings(\n            share_id=FIGI,\n            account_id=ACCOUNT_ID,\n            max_transaction_price=Decimal(10000),\n            candle_interval=CandleInterval.CANDLE_INTERVAL_1_MIN,\n            long_period=timedelta(minutes=100),\n            short_period=timedelta(minutes=20),\n            std_period=timedelta(minutes=30),\n        )\n\n        account_manager = AccountManager(services=services, strategy_settings=settings)\n        state = MovingAverageStrategyState()\n        strategy = MovingAverageStrategy(\n            settings=settings,\n            account_manager=account_manager,\n            state=state,\n        )\n        signal_executor = MovingAverageSignalExecutor(\n            services=services,\n            state=state,\n            settings=settings,\n        )\n        supervisor = MovingAverageStrategySupervisor()\n        trader = MovingAverageStrategyTrader(\n            strategy=strategy,\n            settings=settings,\n            services=services,\n            state=state,\n            signal_executor=signal_executor,\n            account_manager=account_manager,\n            supervisor=supervisor,\n        )\n        plotter = MovingAverageStrategyPlotter(settings=settings)\n\n        initial_balance = account_manager.get_current_balance()\n\n        for i in range(5):\n            logger.info(\"Trade %s\", i)\n            trader.trade()\n\n        current_balance = account_manager.get_current_balance()\n\n        logger.info(\"Initial balance %s\", initial_balance)\n        logger.info(\"Current balance %s\", current_balance)\n\n        events = supervisor.get_events()\n        plotter.plot(events)\n        plt.show()\n</code></pre></p>"},{"location":"api/clients/","title":"Clients","text":""},{"location":"api/clients/#tinkoff.invest.clients.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>Async client.</p> <pre><code>import asyncio\nimport os\n\nfrom tinkoff.invest import AsyncClient\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\nasync def main():\n    async with AsyncClient(TOKEN) as client:\n        print(await client.users.get_accounts())\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Source code in <code>tinkoff/invest/clients.py</code> <pre><code>class AsyncClient:\n    \"\"\"Async client.\n\n    ```python\n    import asyncio\n    import os\n\n    from tinkoff.invest import AsyncClient\n\n    TOKEN = os.environ[\"INVEST_TOKEN\"]\n\n\n    async def main():\n        async with AsyncClient(TOKEN) as client:\n            print(await client.users.get_accounts())\n\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        token: str,\n        *,\n        target: Optional[str] = None,\n        sandbox_token: Optional[str] = None,\n        options: Optional[ChannelArgumentType] = None,\n        app_name: Optional[str] = None,\n        interceptors: Optional[List[ClientInterceptor]] = None,\n    ):\n        self._token = token\n        self._sandbox_token = sandbox_token\n        self._options = options\n        self._app_name = app_name\n        self._channel = create_channel(\n            target=target, force_async=True, options=options, interceptors=interceptors\n        )\n\n    async def __aenter__(self) -&gt; AsyncServices:\n        channel = await self._channel.__aenter__()\n        return AsyncServices(\n            channel,\n            token=self._token,\n            sandbox_token=self._sandbox_token,\n            app_name=self._app_name,\n        )\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self._channel.__aexit__(exc_type, exc_val, exc_tb)\n        return False\n</code></pre>"},{"location":"api/clients/#tinkoff.invest.clients.Client","title":"<code>Client</code>","text":"<p>Sync client.</p> <pre><code>import os\nfrom tinkoff.invest import Client\n\nTOKEN = os.environ[\"INVEST_TOKEN\"]\n\ndef main():\n    with Client(TOKEN) as client:\n        print(client.users.get_accounts())\n</code></pre> Source code in <code>tinkoff/invest/clients.py</code> <pre><code>class Client:\n    \"\"\"Sync client.\n\n    ```python\n    import os\n    from tinkoff.invest import Client\n\n    TOKEN = os.environ[\"INVEST_TOKEN\"]\n\n    def main():\n        with Client(TOKEN) as client:\n            print(client.users.get_accounts())\n\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        token: str,\n        *,\n        target: Optional[str] = None,\n        sandbox_token: Optional[str] = None,\n        options: Optional[ChannelArgumentType] = None,\n        app_name: Optional[str] = None,\n        interceptors: Optional[List[ClientInterceptor]] = None,\n    ):\n        self._token = token\n        self._sandbox_token = sandbox_token\n        self._options = options\n        self._app_name = app_name\n\n        self._channel = create_channel(target=target, options=options)\n        if interceptors is None:\n            interceptors = []\n        for interceptor in interceptors:\n            self._channel = grpc.intercept_channel(self._channel, interceptor)\n\n    def __enter__(self) -&gt; Services:\n        channel = self._channel.__enter__()\n        return Services(\n            channel,\n            token=self._token,\n            sandbox_token=self._sandbox_token,\n            app_name=self._app_name,\n        )\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self._channel.__exit__(exc_type, exc_val, exc_tb)\n        return False\n</code></pre>"}]}