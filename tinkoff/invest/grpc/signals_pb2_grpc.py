# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tinkoff.invest.grpc import (
    signals_pb2 as tinkoff_dot_invest_dot_grpc_dot_signals__pb2,
)


class SignalServiceStub(object):
    """Сервис для получения технических сигналов и мнений аналитиков по инструментам.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStrategies = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SignalService/GetStrategies',
                request_serializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetStrategiesRequest.SerializeToString,
                response_deserializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetStrategiesResponse.FromString,
                )
        self.GetSignals = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.SignalService/GetSignals',
                request_serializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetSignalsRequest.SerializeToString,
                response_deserializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetSignalsResponse.FromString,
                )


class SignalServiceServicer(object):
    """Сервис для получения технических сигналов и мнений аналитиков по инструментам.
    """

    def GetStrategies(self, request, context):
        """Запросить стратегии.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignals(self, request, context):
        """Запросить сигналы.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SignalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStrategies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStrategies,
                    request_deserializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetStrategiesRequest.FromString,
                    response_serializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetStrategiesResponse.SerializeToString,
            ),
            'GetSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignals,
                    request_deserializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetSignalsRequest.FromString,
                    response_serializer=tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetSignalsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tinkoff.public.invest.api.contract.v1.SignalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SignalService(object):
    """Сервис для получения технических сигналов и мнений аналитиков по инструментам.
    """

    @staticmethod
    def GetStrategies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SignalService/GetStrategies',
            tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetStrategiesRequest.SerializeToString,
            tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetStrategiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tinkoff.public.invest.api.contract.v1.SignalService/GetSignals',
            tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetSignalsRequest.SerializeToString,
            tinkoff_dot_invest_dot_grpc_dot_signals__pb2.GetSignalsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
